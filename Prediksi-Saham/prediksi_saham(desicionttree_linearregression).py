# -*- coding: utf-8 -*-
"""Prediksi_saham(DesiciontTree-LinearRegression).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15EDBiQOkToMPdIIJqfJ9fzP0KW10WwLr
"""

# Instal the dependencies
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
plt.style.use('bmh')
import pandas_datareader as web

#Get the Stock
df = web.DataReader('ADRO.JK', data_source='yahoo', start='2008-06-17', end='2021-04-30')
#show the data
df

#Get the number of trading days
df.shape

#Get the close price
 df = df[['Close']]
 df.head(4)

#Creat variabel to predict 'x' days into the future
future_days = 25
#Creat a ner column (target) shift 'x' units/days up
df['Prediction'] = df[['Close']].shift(-future_days)
df.tail(4)

#Creat he feature data set (x) and convert it to a numpy array and remove the last 'x' rows/days
X = np.array(df.drop(['Prediction'], 1))[:-future_days]
print(X)

#Creat the target data set (y) and convert it to a numpy array and get all of the target values except the last 'c' rows/days
y = np.array(df['Prediction'])[:-future_days]
print(y)

#Split the data into 75% training and 25% testing
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)

#Creat the models
#Creat the decision tree regressor model
tree = DecisionTreeRegressor().fit(x_train, y_train)
#Creat the linear regression model
lr = LinearRegression().fit(x_train,y_train)

#Get the last 'x' rows of the feature data set
x_future = df.drop(['Prediction'], 1)[:-future_days]
x_future = x_future.tail(future_days)
x_future = np.array(x_future)
x_future

#Show the model tree prediction
tree_prediction = tree.predict(x_future)
print(tree_prediction)
print()
#show the model linear regression prediction
lr_prediction = lr.predict(x_future)
print(lr_prediction)

#Visualize the data
predictions = tree_prediction
valid = df[X.shape[0]:]
valid['Predictions'] = predictions
plt.figure(figsize = (16, 8))
plt.title('Model')
plt.xlabel('Days')
plt.ylabel('Close Price')
#plt.plot(df['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend([ 'val', 'Pred']) #'Orig',
plt.show()

#Visualize the data
predictions = lr_prediction
valid = df[X.shape[0]:]
valid['Predictions'] = predictions
plt.figure(figsize = (16, 8))
plt.title('Model')
plt.xlabel('Days')
plt.ylabel('Close Price')
#plt.plot(df['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend([ 'val', 'Pred']) #'Orig',
plt.show()

